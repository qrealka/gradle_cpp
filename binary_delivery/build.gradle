/*
 * This build file was auto generated by running the Gradle 'init' task
 * by 'dloginov' at '11/11/15 4:16 PM' with Gradle 2.8
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/2.8/userguide/tutorial_java_projects.html
 */

import groovy.xml.XmlUtil

apply plugin: 'maven'
apply plugin: 'base'

repositories {
	ivy {
        // URL can refer to a local directory
        url repositoryUrl
    }
}

configurations {
    binary_delivery
}

def packagedParsed = new ArrayList<String>()

task ConfigParse {
    dependsOn configurations.binary_delivery
    onlyIf { new File(configFileName).exists() }
    outputs.upToDateWhen { false } // always parse config file

    description  = 'try to parse ' + configFileName

    if (new File(configFileName).exists()) {

        def cfg = new XmlParser().parse(configFileName);
        dependencies {
            cfg.package.each {
                binary_delivery('nitro:' + it.attribute('id') + ':' + it.attribute('version')+'@zip')
                packagedParsed.add(it.attribute('id') + '-' + it.attribute('version') + '.zip')
            }
        }
    }

    doLast {
        configurations.binary_delivery.allDependencies.each {
            println 'Dependency parsed ' + it
        }
    }
}

task download(type: Copy) {
    dependsOn ConfigParse
    dependsOn configurations.binary_delivery

    onlyIf {  new File(configFileName).exists()  }


    from { configurations.binary_delivery.collect { it } }
    into "${projectDir}/${extractRelativePath}"
}

def resoleVC() {
    fileTree(dir: projectsDir, include: '*.vcxproj').each{ file ->
        if (file.isFile())
        {
            def txt = file.text
            if (txt.contains('<Project DefaultTargets="Build" ToolsVersion="12.0" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">')) {
                println  'Find MSVC project file ' + file.name
                def vcProject = new XmlSlurper(false, false).parseText(txt);
                def targets = vcProject.'**'.find { it.name() == 'ImportGroup' && it['@Label'] == 'ExtensionTargets' }
                targets = targets ?: vcProject.appendNode{
                    ImportGroup(Label: 'ExtensionTargets')
                }

                def externalDir = "${projectDir}/${extractRelativePath}"
                fileTree(dir: externalDir, include: '**/*.targets').each { externalTarget ->

                    def node = targets.'*'.find { it.name() == 'Import' && externalTarget.path.contains(it['@Project']) }
                    if (!node) {
                        println 'Append ' + externalTarget.path
                        targets.appendNode{
                            Import( Project: externalTarget.path, Condition: "Exists($externalTarget.path)" )
                        }
                    }
                }

                file.setText(XmlUtil.serialize(vcProject))
            }
        }
    }
}

task resolve {
    dependsOn download

    def externalDir = "${projectDir}/${extractRelativePath}"

    doLast {
        packagedParsed.each {
            def file = new File(externalDir, it)
            def unzipDir = new File(file.path - ".zip")

            if (file.exists() && file.lastModified() > unzipDir.lastModified()) {
                println  'Unzip unpack ' + file
                copy {
                    from zipTree(file)
                    into unzipDir.path
                }
                resoleVC()
                unzipDir.setLastModified(file.lastModified())
            }
        }
    }
}

task wrapper( type: Wrapper, description: "create a gradlew" ) {
    gradleVersion = '2.8'
}

